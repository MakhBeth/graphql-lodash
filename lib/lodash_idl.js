var lodashProps = "\n  map: Path\n  keyBy: Path\n  each: LodashOperations\n\n  # Creates an array of elements split into groups the length of size.\n  # If array can't be split evenly, the final chunk will be the remaining elements.\n  chunk: Int\n\n  # Creates a slice of array with n elements dropped from the beginning.\n  drop: Int\n\n  # Creates a slice of array with n elements dropped from the end.\n  dropRight: Int\n\n  # Creates a slice of array with n elements taken from the beginning.\n  take: Int\n\n  # Creates a slice of array with n elements taken from the end.\n  takeRight: Int\n\n  # Recursively flatten array up to depth times.\n  flattenDepth: Int\n\n  # The inverse of `toPairs`; this method returns an object composed from key-value\n  # pairs.\n  fromPairs: DummyArgument\n\n  # Gets the element at index n of array. If n is negative, the nth element from\n  # the end is returned.\n  nth: Int\n\n  # Reverses array so that the first element becomes the last, the second element\n  # becomes the second to last, and so on.\n  reverse: DummyArgument\n\n  # Creates a duplicate-free version of an array, in which only the first occurrence\n  # of each element is kept. The order of result values is determined by the order\n  # they occur in the array.\n  uniq: DummyArgument\n\n  uniqBy: Path\n\n  countBy: Path\n  filter: JSON\n  reject: JSON\n  filterIf: Predicate\n  rejectIf: Predicate\n  groupBy: Path\n  sortBy: [Path!]\n\n  minBy: Path\n  maxBy: Path\n  meanBy: Path\n  sumBy: Path\n\n  # Converts all elements in array into a string separated by separator.\n  join: String\n\n  get: Path\n  mapValues: Path\n\n  # Creates an array of values corresponding to paths of object.\n  at: [Path!]\n  # Creates an array of own enumerable string keyed-value pairs for object.\n  toPairs: DummyArgument\n\n  # Creates an object composed of the inverted keys and values of object.\n  # If object contains duplicate values, subsequent values overwrite property\n  # assignments of previous values.\n  invert: DummyArgument\n\n  invertBy: Path\n  # Creates an array of the own enumerable property names of object.\n  keys: DummyArgument\n  # Creates an array of the own enumerable string keyed property values of object.\n  values: DummyArgument\n";
export var lodashIDL = "\nscalar Path\nscalar JSON\n\nenum DummyArgument {\n  none\n}\n\ninput Predicate {\n  lt: JSON\n  lte: JSON\n  gt: JSON\n  gte: JSON\n  eq: JSON\n  startsWith: String\n  endsWith: String\n  and: [Predicate!]\n  or: [Predicate!]\n" + lodashProps + "\n}\n\ndirective @_(\n" + lodashProps + "\n) on FIELD | QUERY\n\ninput LodashOperations {\n" + lodashProps + "\n}\n";
//# sourceMappingURL=lodash_idl.js.map